{"prompt_tabletop_ui": "# Python 2D robot control script\nimport numpy as np\nfrom env_utils import put_first_on_second, get_obj_pos, get_obj_names, say, get_corner_name, get_side_name, is_obj_visible, stack_objects_in_order\nfrom plan_utils import parse_obj_name, parse_position, parse_question, transform_shape_pts\n\nobjects = ['yellow block', 'green block', 'yellow bowl', 'blue block', 'blue bowl', 'green bowl']\n# put the yellow block on the yellow bowl.\nsay('Ok - putting the yellow block on the yellow bowl')\nput_first_on_second('yellow block', 'yellow bowl')\n<EOS>\nobjects = ['yellow block', 'green block', 'yellow bowl', 'blue block', 'blue bowl', 'green bowl']\n# move the green block to the top right corner.\ncorner_pos = parse_position('top right corner')\nsay('Got it - putting the green block on the top right corner')\nput_first_on_second('green block', corner_pos)\n<EOS>\nobjects = ['orange block', 'white block', 'orange bowl', 'blue block', 'blue bowl', 'white bowl']\n# put the orange block in the bowl with matching color.\nmatches = {'orange block': 'orange bowl'}\nfor first, second in matches.items():\n    put_first_on_second(first, second)\n<EOS>\nobjects = ['yellow bowl', 'green block', 'yellow block', 'green bowl', 'blue bowl', 'blue block']\n# place the third block from the left side on the top left corner.\nsay('Finding the third block from the left side')\nblock_name = parse_obj_name('the third block from the left side', f'objects = {get_obj_names()}')\ncorner_pos = parse_position('top left corner')\nsay(f'Putting the {block_name} on the top left corner')\nput_first_on_second(block_name, corner_pos)\n<EOS>\nobjects = ['yellow bowl', 'green block', 'yellow block', 'green bowl', 'blue bowl', 'blue block']\n# put all the blocks on the left side.\nblock_names = parse_obj_name('all the blocks', f'objects = {get_obj_names()}')\nside_position = parse_position('the left side')\nsay(f'Got it - putting all the blocks on the left side')\nfor block_name in block_names:\n    put_first_on_second(block_name, side_position)\n<EOS>\nobjects = ['red block', 'green block', 'red bowl', 'blue block', 'blue bowl', 'green bowl']\n# move the blue block to the top side.\nside_position = parse_position('the top side')\nsay(f'Moving the blue block to the top side')\nput_first_on_second('blue block', side_position)\n<EOS>\nobjects = ['red block', 'green block', 'red bowl', 'orange block', 'orange bowl', 'green bowl']\n# put all the blocks in the bowls with matching color.\nsay('Finding all the matches between blocks and bowls')\nmatches = {'red block': 'red bowl', 'green block': 'green bowl', 'orange block': 'orange bowl'}\nsay('Putting all the blocks in the bowls with matching color')\nfor first, second in matches.items():\n    put_first_on_second(first, second)\n<EOS>", "prompt_parse_obj_name": "import numpy as np\nfrom env_utils import get_obj_pos, parse_position\nfrom utils import get_obj_positions_np\n\nobjects = ['red bowl', 'yellow bowl', 'red block', 'yellow block', 'blue bowl', 'blue block']\n# all the blocks.\nret_val = ['red block', 'yellow block', 'blue block']\n<EOS>\nobjects = ['blue block', 'green block', 'red bowl', 'yellow bowl', 'red block']\n# the blue block.\nret_val = 'blue block'\n<EOS>\nobjects = ['green bowl', 'green block', 'red bowl', 'yellow bowl', 'red block', 'yellow block']\n# the block closest to the bottom right corner.\ncorner_pos = parse_position('bottom right corner')\nblock_names = ['green block', 'red block','yellow block']\nblock_positions = get_obj_positions_np(block_names)\nclosest_block_idx = get_closest_idx(points=block_positions, point=corner_pos)\nclosest_block_name = block_names[closest_block_idx]\nret_val = closest_block_name\n<EOS>\nobjects = ['yellow bowl', 'green block', 'yellow block', 'green bowl', 'blue bowl', 'blue block']\n# the left most block.\nblock_names = ['green block', 'yellow block', 'blue block']\nblock_positions = get_obj_positions_np(block_names)\nleft_block_idx = np.argsort(block_positions[:, 0])[0]\nleft_block_name = block_names[left_block_idx]\nret_val = left_block_name\n<EOS>\nobjects = ['yellow bowl', 'blue block', 'yellow block', 'blue bowl', 'red bowl', 'red block']\n# the first block from the left.\nblock_names = ['yellow block', 'blue block', 'red block']\nblock_positions = get_obj_positions_np(block_names)\nblock_idx = np.argsort(block_positions[:, 0])[0]\nblock_name = block_names[block_idx]\nret_val = block_name\n<EOS>\nobjects = ['yellow bowl', 'green block', 'yellow block', 'blue bowl', 'red bowl', 'red block']\n# the third block from the top.\nblock_names = ['yellow block', 'green block', 'red block'] \nblock_positions = get_obj_positions_np(block_names)\nblock_idx = np.argsort(block_positions[:, 1])[-3]\nblock_name = block_names[block_idx]\nret_val = block_name\n<EOS>", "prompt_parse_position": "import numpy as np\nfrom env_utils import denormalize_xy, parse_obj_name, get_obj_names, get_obj_pos\n\n# a point 10cm left of the bowls.\nbowl_names = parse_obj_name('the bowls', f'objects = {get_obj_names()}')\nbowl_positions = get_all_object_positions_np(obj_names=bowl_names)\nleft_obj_pos = bowl_positions[np.argmin(bowl_positions[:, 0])] + [-0.1, 0]\nret_val = left_obj_pos\n<EOS>\n# the left side.\nret_val = denormalize_xy([0, 0.5])\n<EOS>\n# the top side.\nret_val = denormalize_xy([0.5, 1])\n<EOS>\n# the top right corner.\nret_val = denormalize_xy([1, 1])\n<EOS>\n# the top left corner.\nret_val = denormalize_xy([0, 1])\n<EOS>", "prompt_parse_question": "from utils import get_obj_pos, get_obj_names, parse_obj_name, bbox_contains_pt, is_obj_visible\n\nobjects = ['yellow bowl', 'blue block', 'yellow block', 'blue bowl', 'fruit', 'green block', 'black bowl']\n# is the blue block to the right of the yellow bowl?\nret_val = get_obj_pos('blue block')[0] > get_obj_pos('yellow bowl')[0]\nobjects = ['yellow bowl', 'blue block', 'yellow block', 'blue bowl', 'fruit', 'green block', 'black bowl']\n# how many yellow objects are there?\nyellow_object_names = parse_obj_name('the yellow objects', f'objects = {get_obj_names()}')\nret_val = len(yellow_object_names)\nobjects = ['pink block', 'green block', 'pink bowl', 'blue block', 'blue bowl', 'green bowl']\n# is the pink block on the green bowl?\nret_val = bbox_contains_pt(container_name='green bowl', obj_name='pink block')\nobjects = ['pink block', 'green block', 'pink bowl', 'blue block', 'blue bowl', 'green bowl']\n# what are the blocks left of the green bowl?\nblock_names = parse_obj_name('the blocks', f'objects = {get_obj_names()}')\ngreen_bowl_pos = get_obj_pos('green bowl')\nleft_block_names = []\nfor block_name in block_names:\n  if get_obj_pos(block_name)[0] < green_bowl_pos[0]:\n    left_block_names.append(block_name)\nret_val = left_block_names\nobjects = ['pink block', 'yellow block', 'pink bowl', 'blue block', 'blue bowl', 'yellow bowl']\n# is the sun colored block above the blue bowl?\nsun_block_name = parse_obj_name('sun colored block', f'objects = {get_obj_names()}')\nsun_block_pos = get_obj_pos(sun_block_name)\nblue_bowl_pos = get_obj_pos('blue bowl')\nret_val = sun_block_pos[1] > blue_bowl_pos[1]\nobjects = ['pink block', 'yellow block', 'pink bowl', 'blue block', 'blue bowl', 'yellow bowl']\n# is the green block below the blue bowl?\nret_val = get_obj_pos('green block')[1] < get_obj_pos('blue bowl')[1]", "prompt_transform_shape_pts": "import numpy as np\nfrom utils import get_obj_pos, get_obj_names, parse_position, parse_obj_name\n\n# make it bigger by 1.5.\nnew_shape_pts = scale_pts_around_centroid_np(shape_pts, scale_x=1.5, scale_y=1.5)\n# move it to the right by 10cm.\nnew_shape_pts = translate_pts_np(shape_pts, delta=[0.1, 0])\n# move it to the top by 20cm.\nnew_shape_pts = translate_pts_np(shape_pts, delta=[0, 0.2])\n# rotate it clockwise by 40 degrees.\nnew_shape_pts = rotate_pts_around_centroid_np(shape_pts, angle=-np.deg2rad(40))\n# rotate by 30 degrees and make it slightly smaller\nnew_shape_pts = rotate_pts_around_centroid_np(shape_pts, angle=np.deg2rad(30))\nnew_shape_pts = scale_pts_around_centroid_np(new_shape_pts, scale_x=0.7, scale_y=0.7)\n# move it toward the blue block.\nblock_name = parse_obj_name('the blue block', f'objects = {get_obj_names()}')\nblock_pos = get_obj_pos(block_name)\nmean_delta = np.mean(block_pos - shape_pts, axis=1)\nnew_shape_pts = translate_pts_np(shape_pts, mean_delta)", "prompt_fgen": "import numpy as np\nfrom env_utils import get_obj_pos, get_obj_names\nfrom ctrl_utils import put_first_on_second\n\n# define function: total = get_total(xs=numbers).\ndef get_total(xs):\n    return np.sum(xs)\n<EOS>\n# define function: pt = get_pt_to_the_left(pt, dist).\ndef get_pt_to_the_left(pt, dist):\n    return pt + [-dist, 0]\n<EOS>\n# define function: pt = get_pt_to_the_top(pt, dist).\ndef get_pt_to_the_top(pt, dist):\n    return pt + [0, dist]\n<EOS>"}
